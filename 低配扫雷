//game.h
#pragma once
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#define ROW 9
#define COL 9
#define ROWS ROW+2
#define COLS COL+2
#define N 10
void menu();
void game();
void InitBoard(char arr[ROWS][COLS], int rows, int cols,char ch);
void DisplayBoard(char arr[ROWS][COLS], int row, int col);
void SetMine(char arr[ROWS][COLS], int row, int col);
void FindMine(char arr1[ROWS][COLS], char arr2[ROWS][COLS], int row, int col);
int get_count_mine(char arr[ROWS][COLS], int  x, int y);

//game.c
#include "game.h"
int main() {
	srand((unsigned int)time(NULL));
	int choice = 0;
	do{
		menu();
		scanf("%d", &choice);
		switch (choice) {
		case 1:
			printf("开始扫雷！！！\n");
			game();
			break;
		case 0:
			printf("退出游戏！！！\n");
			break;
		default:
			printf("选择错误！！！\n请重新选择\n");
			break;
		}
	} while (choice == 1);
	return 0;
}

//test.c
#include "game.h" 
void menu() {
	printf("---------------------\n");
	printf("-------1.play--------\n");
	printf("-------0.exit--------\n");
	printf("---------------------\n");
}
void game() {
	char arr1[ROWS][COLS] = { 0 };
	char arr2[ROWS][COLS] = { 0 };
	InitBoard(arr1, ROWS, COLS, '0');
	InitBoard(arr2, ROWS, COLS, '*');
	//DisplayBoard(arr1, ROW, COL);
	//DisplayBoard(arr2, ROW, COL);
	SetMine(arr1, ROW, COL);
	DisplayBoard(arr2, ROW, COL);
	//DisplayBoard(arr1, ROW, COL);
	FindMine(arr1, arr2, ROW, COL);
}
void InitBoard(char arr[ROWS][COLS], int rows, int cols, char ch) {
	int i = 0;
	int j = 0;
	for (i = 0; i < rows; i++) {
		for (j = 0; j < cols; j++) {
			arr[i][j] = ch;
		}
	}
}
void DisplayBoard(char arr[ROWS][COLS], int row, int col) {
	int i = 0;
	int j = 0;
	printf("………………扫雷………………\n");
	for (j = 0; j <= col; j++) {
		printf("%d ", j);
	}
	printf("\n");
	for (i = 1; i <= row; i++) {
		printf("%d ", i);
		for (j = 1; j <= col; j++) {
			printf("%c ", arr[i][j]);
		}
			printf("\n");
	}
	printf("……………………………………\n");
}
void SetMine(char arr[ROWS][COLS], int row, int col) {
	int n = N;
	while (n) {
		int i = rand() % 9 + 1;
		int j = rand() % 9 + 1;
		if (arr[i][j] == '0') {
			arr[i][j] = '1';
			n--;
		}
	}
}
void FindMine(char arr1[ROWS][COLS], char arr2[ROWS][COLS], int row, int col) {
	int x = 0;
	int y = 0;
	int win = 0;
	while (win < ROW*COL - N) {
		printf("请输入排除的目标:");
		scanf("%d,%d", &x, &y);
		if (x >= 1 && x <= row && y >= 1 && y <= col) {
			if (arr1[x][y] != '0') {
				printf("菜鸡就是不行！你炸了!\n");
				DisplayBoard(arr1, ROW, COL);
				break;
			}
			else {
				win++;
				int n = get_count_mine(arr1,x,y);
				arr2[x][y] = n + '0';
				DisplayBoard(arr2, ROW, COL);
			}
		}
		else {
			printf("超出范围，请重新输入！\n");
			break;
		}
	}
	if (win == ROW * COL - N) {
		printf("你赢啦！！！老铁666\n");
	}
	
}
int get_count_mine(char arr[ROWS][COLS], int  x, int y) {
	int m = 0;
	int n = 0;
	m = arr[x - 1][y - 1] + 
		arr[x - 1][y] + 
		arr[x - 1][y + 1] + 
		arr[x][y - 1] + 
		arr[x][y + 1] + 
		arr[x + 1][y - 1] + 
		arr[x + 1][y] + 
		arr[x + 1][y + 1];
	n = 8 * '0';
	return m - n;
}
